-- Decompiled with CoDLUIDecompiler by JariK

-- OP Count: 0x116
-- Constant Count: 0x69
-- Registers Count: 0xA
-- UpValue Count: 0x0
-- SubFuncs Count: 0x25
-- r(0) = g[0] // WorldMap
local registerVal1 = {}
local registerVal2 = {}
registerVal2.Name = "WorldView"
registerVal2.Dist = 100.000000
registerVal2.Tilt = 60.000000
registerVal2.NextMode = "RegionView"
registerVal2.MovementMultiplier = 5.000000
registerVal2.TotalExtraMovementMultiplier = 2.000000
registerVal2.MaxDistanceTillFullSpeed = 50.000000
local registerVal3 = {}
-- r(4) = g[18] // COrientation
-- r(5) = g[19] // CVector3
-- r(6) = c[20] // 0.000000
-- r(7) = c[20] // 0.000000
-- r(8) = c[21] // 1.000000
local registerVal5 = CVector3(0.000000, 0.000000, 1.000000)
-- r(6) = g[19] // CVector3
-- r(7) = c[20] // 0.000000
-- r(8) = c[21] // 1.000000
-- r(9) = c[20] // 0.000000
local registerVal4 = COrientation(registerVal5, CVector3(0.000000, 1.000000, 0.000000))
registerVal3.Orientation = registerVal4
registerVal2.Cursor = registerVal3
registerVal3 = {}
registerVal3.Scale = 7.500000
registerVal4 = {}
registerVal4.A = 1.000000
registerVal3.Colour = registerVal4
registerVal2.CursorGraphic = registerVal3
registerVal2.TiltCursor = true
registerVal2.CursorRotateAngle = 20.000000
registerVal2.CursorGraphicMovementTime = 0.000000
registerVal2.CursorDistFromCamera = 15.000000
registerVal2.CursorLightDistFromGround = 0.000000
registerVal2.CursorLightDistTowardsCamera = 20.000000
registerVal2.SpriteTimeFrameAddition = 0.300000
registerVal2.SpriteScaleMultiply = 1.000000
registerVal2.LastTarget = nil
registerVal3 = {}
registerVal3.Range = 50.000000
registerVal3.FadeDistance = 2000.000000
registerVal3.FadeRange = 600.000000
registerVal4 = {}
registerVal4.R = 1.500000
registerVal4.G = 1.500000
registerVal4.B = 1.500000
registerVal3.Colour = registerVal4
registerVal2.CursorLightParams = registerVal3
registerVal1.WorldView = registerVal2
registerVal2 = {}
registerVal2.Name = "RegionView"
registerVal2.Dist = 150.000000
registerVal2.Tilt = 45.000000
registerVal2.NextMode = "StreetView"
registerVal3 = {}
registerVal3.WorldView = "SE_GUI_TOWN_SELECT"
registerVal2.EnterSounds = registerVal3
registerVal3 = {}
registerVal3.WorldView = "SE_GUI_TOWN_DESELECT"
registerVal2.ExitSounds = registerVal3
registerVal2.MovementMultiplier = 4.000000
registerVal3 = {}
-- r(4) = g[18] // COrientation
-- r(5) = g[19] // CVector3
-- r(6) = c[20] // 0.000000
-- r(7) = c[59] // -1.000000
-- r(8) = c[20] // 0.000000
registerVal5 = CVector3(0.000000, -1.000000, 0.000000)
-- r(6) = g[19] // CVector3
-- r(7) = c[20] // 0.000000
-- r(8) = c[20] // 0.000000
-- r(9) = c[21] // 1.000000
registerVal4 = COrientation(registerVal5, CVector3(0.000000, 0.000000, 1.000000))
registerVal3.Orientation = registerVal4
registerVal2.Cursor = registerVal3
registerVal3 = {}
registerVal3.Scale = 7.500000
registerVal4 = {}
registerVal4.A = 1.000000
registerVal3.Colour = registerVal4
registerVal2.CursorGraphic = registerVal3
registerVal2.TiltCursor = true
registerVal2.CursorRotateAngle = 10.000000
registerVal2.CursorGraphicMovementTime = 0.000000
registerVal2.CursorDistFromCamera = 15.000000
registerVal2.CursorLightDistFromGround = 0.000000
registerVal2.CursorLightDistTowardsCamera = 30.000000
registerVal2.SpriteTimeFrameAddition = 0.300000
registerVal2.SpriteScaleMultiply = 1.000000
registerVal3 = {}
registerVal3.Range = 50.000000
registerVal3.FadeDistance = 2000.000000
registerVal3.FadeRange = 600.000000
registerVal4 = {}
registerVal4.R = 1.500000
registerVal4.G = 1.500000
registerVal4.B = 1.500000
registerVal3.Colour = registerVal4
registerVal2.CursorLightParams = registerVal3
registerVal1.RegionView = registerVal2
registerVal2 = {}
registerVal2.Name = "StreetView"
registerVal2.Dist = 40.000000
registerVal2.Tilt = 10.000000
registerVal2.FaceTarget = true
registerVal3 = {}
-- r(4) = g[18] // COrientation
-- r(5) = g[19] // CVector3
-- r(6) = c[20] // 0.000000
-- r(7) = c[59] // -1.000000
-- r(8) = c[20] // 0.000000
registerVal5 = CVector3(0.000000, -1.000000, 0.000000)
-- r(6) = g[19] // CVector3
-- r(7) = c[20] // 0.000000
-- r(8) = c[20] // 0.000000
-- r(9) = c[21] // 1.000000
registerVal4 = COrientation(registerVal5, CVector3(0.000000, 0.000000, 1.000000))
registerVal3.Orientation = registerVal4
registerVal2.Cursor = registerVal3
registerVal3 = {}
registerVal3.Scale = 7.500000
registerVal4 = {}
registerVal4.A = 0.000000
registerVal3.Colour = registerVal4
registerVal2.CursorGraphic = registerVal3
registerVal2.CursorGraphicMovementTime = 0.400000
registerVal2.CursorDistFromCamera = -10.000000
registerVal2.CursorLightDistFromGround = 0.000000
registerVal2.CursorLightDistTowardsCamera = 0.000000
registerVal2.SpriteTimeFrameAddition = 0.000000
registerVal2.SpriteScaleMultiply = 1.000000
registerVal3 = {}
registerVal3.Range = 0.000000
registerVal3.FadeDistance = 0.000000
registerVal3.FadeRange = 0.000000
registerVal4 = {}
registerVal4.R = 0.000000
registerVal4.G = 0.000000
registerVal4.B = 0.000000
registerVal3.Colour = registerVal4
registerVal2.CursorLightParams = registerVal3
registerVal3 = {}
registerVal3.FocalRadius = 5.000000
registerVal3.BlurAmount = 1.000000
registerVal3.BlurDist = 20.000000
registerVal2.DepthOfField = registerVal3
registerVal1.StreetView = registerVal2
WorldMap.Modes = registerVal1
-- r(0) = g[0] // WorldMap
WorldMap.HouseEnvironmentTheme = "EnvThemeNewCombatFailure"
-- r(0) = g[0] // WorldMap
-- r(0) = r(0).field(1) // WorldMap.Modes
-- r(0) = r(0).field(2) // WorldMap.Modes.WorldView
	-- OP Count: 0x61
	-- Constant Count: 0x28
	-- Registers Count: 0x8
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.Modes.WorldView.OnEnter(arg0)
	-- r(1) = r(0).field(0) // arg0.OldMode
	-- r(2) = r(0).field(1) // arg0.Modes
	-- r(2) = r(2).field(2) // arg0.Modes.RegionView
	-- skip the next [25] opcodes // advance 25 lines
	-- r(1) = r(0).field(3) // arg0.CurrentRegion
	-- skip the next [22] opcodes // advance 22 lines
	-- r(1) = r(0):c[4] // arg0:CollapseRegion
	-- r(3) = c[5] // 1.000000
	local registerVal4 = {}
	local registerVal5 = {}
	local registerVal6 = {}
	local registerVal7 = {}
	registerVal7.A = 0.000000
	registerVal6.Colour = registerVal7
	registerVal6.Scale = 0.000000
	-- r(7) = r(0).field(3) // arg0.CurrentRegion
	-- r(7) = r(7).field(13) // arg0.CurrentRegion.Centre
	registerVal6.Position = arg0.CurrentRegion.Centre
	registerVal5[0.500000] = registerVal6
	registerVal4.Keyframes = registerVal5
	arg0:CollapseRegion(1.000000, registerVal4)
	-- r(1) = r(0).field(1) // arg0.Modes
	-- r(1) = r(1).field(14) // arg0.Modes.LastTarget
	if arg0.OldMode == arg0.Modes.RegionView and arg0.CurrentRegion and arg0.Modes.LastTarget then
		-- r(1) = r(0).field(1) // arg0.Modes
		-- r(1) = r(1).field(14) // arg0.Modes.LastTarget
		arg0.Target = arg0.Modes.LastTarget
	end
	-- r(1) = r(0):c[16] // arg0:LoadRegion
	-- r(3) = c[17] // "WorldMap"
	arg0:LoadRegion("WorldMap")
	-- r(1) = r(0).field(1) // arg0.Modes
	-- r(1) = r(1).field(18) // arg0.Modes.WorldView
	-- r(1) = r(1).field(19) // arg0.Modes.WorldView.CursorPosition
	if arg0.Modes.WorldView.CursorPosition then
		-- r(1) = r(0).field(1) // arg0.Modes
		-- r(1) = r(1).field(18) // arg0.Modes.WorldView
		-- r(1) = r(1).field(19) // arg0.Modes.WorldView.CursorPosition
		arg0.ModeChangeOverridePosition = arg0.Modes.WorldView.CursorPosition
		-- r(1) = r(0).field(21) // arg0.Cursor
		-- r(1) = r(1).field(22) // arg0.Cursor.Entity
		-- r(1) = r(1):c[23] // arg0.Cursor.Entity:SetPos
		-- r(3) = r(0).field(20) // arg0.ModeChangeOverridePosition
		arg0.Cursor.Entity:SetPos(arg0.ModeChangeOverridePosition)
		-- skip the next [14] opcodes // advance 14 lines
	else
		-- r(1) = r(0).field(3) // arg0.CurrentRegion
		-- skip the next [11] opcodes // advance 11 lines
		-- r(1) = r(0).field(21) // arg0.Cursor
		if arg0.CurrentRegion and arg0.Cursor then
			-- r(1) = g[24] // CVector3
			-- r(2) = r(0).field(3) // arg0.CurrentRegion
			-- r(2) = r(2).field(13) // arg0.CurrentRegion.Centre
			local registerVal1 = CVector3(arg0.CurrentRegion.Centre)
			-- r(2) = r(1):c[25] // registerVal1:SetZ
			-- r(4) = c[10] // 0.000000
			registerVal1:SetZ(0.000000)
			arg0.ModeChangeOverridePosition = registerVal1
		end
	end
	-- r(1) = r(0):c[26] // arg0:LoadWorldMap
	arg0:LoadWorldMap()
	-- r(1) = r(0).field(27) // arg0.State
	-- r(2) = g[28] // EWorldMapState
	-- r(2) = r(2).field(29) // EWorldMapState.MAP_STATE_MOVING_FAMILY
	-- skip the next [18] opcodes // advance 18 lines
	-- r(1) = r(0).field(27) // arg0.State
	-- r(2) = g[28] // EWorldMapState
	-- r(2) = r(2).field(30) // EWorldMapState.MAP_STATE_MOVING_SOLDIERS
	-- skip the next [13] opcodes // advance 13 lines
	-- r(1) = r(0).field(27) // arg0.State
	-- r(2) = g[28] // EWorldMapState
	-- r(2) = r(2).field(31) // EWorldMapState.MAP_STATE_SPECTATOR_MODE
	-- skip the next [8] opcodes // advance 8 lines
	-- r(1) = r(0).field(27) // arg0.State
	-- r(2) = g[28] // EWorldMapState
	-- r(2) = r(2).field(32) // EWorldMapState.MAP_STATE_SPECTATOR_MODE_WEDDING_LOCATION
	if arg0.State ~= EWorldMapState.MAP_STATE_MOVING_FAMILY and arg0.State ~= EWorldMapState.MAP_STATE_MOVING_SOLDIERS and arg0.State ~= EWorldMapState.MAP_STATE_SPECTATOR_MODE and arg0.State ~= EWorldMapState.MAP_STATE_SPECTATOR_MODE_WEDDING_LOCATION then
		-- r(1) = g[28] // EWorldMapState
		-- r(1) = r(1).field(33) // EWorldMapState.MAP_STATE_DEFAULT
		arg0.State = EWorldMapState.MAP_STATE_DEFAULT
	end
	-- r(1) = r(0):c[34] // arg0:AddWorldMapIcons
	arg0:AddWorldMapIcons()
	-- r(1) = r(0):c[35] // arg0:AddRegionLabels
	arg0:AddRegionLabels()
	arg0.AutomaticCursorUpdateSpeed = 0.000000
	-- r(1) = r(0):c[37] // arg0:SetThemeFromRegion
	-- r(3) = r(0).field(38) // arg0.Regions
	-- r(3) = r(3).field(39) // arg0.Regions.TEXT_REGION_WORLD_MAP
	arg0:SetThemeFromRegion(arg0.Regions.TEXT_REGION_WORLD_MAP)
	-- return
end

-- r(0) = g[0] // WorldMap
-- r(0) = r(0).field(1) // WorldMap.Modes
-- r(0) = r(0).field(2) // WorldMap.Modes.WorldView
	-- OP Count: 0x27
	-- Constant Count: 0x15
	-- Registers Count: 0x8
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.Modes.WorldView.OnExit(arg0)
	-- r(1) = r(0):c[0] // arg0:RemoveRegionLabels
	arg0:RemoveRegionLabels()
	-- r(1) = r(0):c[1] // arg0:RemoveWorldMapIcons
	arg0:RemoveWorldMapIcons()
	-- r(1) = r(0).field(2) // arg0.Map
	if arg0.Map then
		-- r(1) = r(0).field(3) // arg0.Animate
		-- r(2) = r(0).field(2) // arg0.Map
		local registerVal3 = {}
		local registerVal4 = {}
		local registerVal5 = {}
		local registerVal6 = {}
		registerVal6.R = 0.100000
		registerVal6.G = 0.100000
		registerVal6.B = 0.100000
		registerVal5.Colour = registerVal6
		registerVal4[0.500000] = registerVal5
		registerVal3.Keyframes = registerVal4
		arg0.Animate(arg0.Map, registerVal3)
	end
	-- r(1) = r(0):c[11] // arg0:CollapseRegion
	-- r(3) = c[12] // 1.000000
	registerVal4 = {}
	registerVal5 = {}
	registerVal6 = {}
	local registerVal7 = {}
	registerVal7.A = 0.000000
	registerVal6.Colour = registerVal7
	registerVal5[0.500000] = registerVal6
	registerVal4.Keyframes = registerVal5
	arg0:CollapseRegion(1.000000, registerVal4)
	-- r(1) = r(0).field(15) // arg0.Modes
	-- r(1) = r(1).field(16) // arg0.Modes.WorldView
	-- r(2) = r(0).field(18) // arg0.Cursor
	-- r(2) = r(2).field(19) // arg0.Cursor.Entity
	-- r(2) = r(2):c[20] // arg0.Cursor.Entity:GetPos
	local registerVal2 = arg0.Cursor.Entity:GetPos()
	arg0.Modes.WorldView.CursorPosition = registerVal2
	-- return
end

-- r(0) = g[0] // WorldMap
-- r(0) = r(0).field(1) // WorldMap.Modes
-- r(0) = r(0).field(9) // WorldMap.Modes.RegionView
	-- OP Count: 0x3E
	-- Constant Count: 0x16
	-- Registers Count: 0x6
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.Modes.RegionView.OnEnter(arg0)
	-- r(1) = r(0).field(0) // arg0.CurrentRegion
	if not arg0.CurrentRegion then
		-- r(1) = r(0).field(1) // arg0.ZoomTarget
		-- r(1) = r(1).field(2) // arg0.ZoomTarget.RegionInfo
	end
	-- r(2) = r(0).field(3) // arg0.Modes
	-- r(2) = r(2).field(4) // arg0.Modes.RegionView
	-- r(2) = r(2).field(5) // arg0.Modes.RegionView.CursorPosition
	-- skip the next [12] opcodes // advance 12 lines
	-- r(2) = r(0).field(6) // arg0.LastEnteredRegion
	if arg0.Modes.RegionView.CursorPosition and arg0.LastEnteredRegion == arg0.ZoomTarget.RegionInfo then
		-- r(2) = r(0).field(3) // arg0.Modes
		-- r(2) = r(2).field(4) // arg0.Modes.RegionView
		-- r(2) = r(2).field(5) // arg0.Modes.RegionView.CursorPosition
		arg0.ModeChangeOverridePosition = arg0.Modes.RegionView.CursorPosition
		-- r(2) = r(0).field(8) // arg0.Cursor
		-- r(2) = r(2).field(9) // arg0.Cursor.Entity
		-- r(2) = r(2):c[10] // arg0.Cursor.Entity:SetPos
		-- r(4) = r(0).field(7) // arg0.ModeChangeOverridePosition
		arg0.Cursor.Entity:SetPos(arg0.ModeChangeOverridePosition)
	end
	arg0.LastEnteredRegion = arg0.ZoomTarget.RegionInfo
	-- r(2) = r(0).field(0) // arg0.CurrentRegion
	if not arg0.CurrentRegion then
		-- r(2) = r(0):c[11] // arg0:LoadRegion
		-- r(4) = r(0).field(1) // arg0.ZoomTarget
		-- r(4) = r(4).field(2) // arg0.ZoomTarget.RegionInfo
		-- r(4) = r(4).field(12) // arg0.ZoomTarget.RegionInfo.MapLevel
		-- r(5) = r(0).field(1) // arg0.ZoomTarget
		-- r(5) = r(5).field(2) // arg0.ZoomTarget.RegionInfo
		arg0:LoadRegion(arg0.ZoomTarget.RegionInfo.MapLevel, arg0.ZoomTarget.RegionInfo)
		-- r(2) = r(0):c[13] // arg0:UnfurlRegion
		-- r(4) = r(0).field(1) // arg0.ZoomTarget
		-- r(4) = r(4).field(2) // arg0.ZoomTarget.RegionInfo
		arg0:UnfurlRegion(arg0.ZoomTarget.RegionInfo)
	end
	-- r(2) = r(0).field(14) // arg0.State
	-- r(3) = g[15] // EWorldMapState
	-- r(3) = r(3).field(16) // EWorldMapState.MAP_STATE_MOVING_FAMILY
	-- skip the next [14] opcodes // advance 14 lines
	-- r(2) = r(0).field(14) // arg0.State
	-- r(3) = g[15] // EWorldMapState
	-- r(3) = r(3).field(17) // EWorldMapState.MAP_STATE_SPECTATOR_MODE
	-- skip the next [9] opcodes // advance 9 lines
	-- r(2) = r(0).field(14) // arg0.State
	-- r(3) = g[15] // EWorldMapState
	-- r(3) = r(3).field(18) // EWorldMapState.MAP_STATE_SPECTATOR_MODE_WEDDING_LOCATION
	if arg0.State ~= EWorldMapState.MAP_STATE_MOVING_FAMILY and arg0.State ~= EWorldMapState.MAP_STATE_SPECTATOR_MODE and arg0.State ~= EWorldMapState.MAP_STATE_SPECTATOR_MODE_WEDDING_LOCATION then
		-- r(2) = g[15] // EWorldMapState
		-- r(2) = r(2).field(19) // EWorldMapState.MAP_STATE_DEFAULT
		arg0.State = EWorldMapState.MAP_STATE_DEFAULT
		-- skip the next [2] opcodes // advance 2 lines
	else
		-- r(2) = r(0):c[20] // arg0:DesaturateBuildingsExceptPotentialHomes
		arg0:DesaturateBuildingsExceptPotentialHomes()
	end
	-- r(2) = r(0):c[21] // arg0:SetThemeFromRegion
	-- r(4) = r(0).field(0) // arg0.CurrentRegion
	arg0:SetThemeFromRegion(arg0.CurrentRegion)
	-- return
end

-- r(0) = g[0] // WorldMap
-- r(0) = r(0).field(1) // WorldMap.Modes
-- r(0) = r(0).field(9) // WorldMap.Modes.RegionView
	-- OP Count: 0xF
	-- Constant Count: 0x8
	-- Registers Count: 0x4
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.Modes.RegionView.OnExit(arg0)
	-- r(1) = r(0).field(0) // arg0.InBounds
	if arg0.InBounds then
		-- r(1) = r(0).field(1) // arg0.Modes
		-- r(1) = r(1).field(2) // arg0.Modes.RegionView
		-- r(2) = r(0).field(4) // arg0.Cursor
		-- r(2) = r(2).field(5) // arg0.Cursor.Entity
		-- r(2) = r(2):c[6] // arg0.Cursor.Entity:GetPos
		local registerVal2 = arg0.Cursor.Entity:GetPos()
		arg0.Modes.RegionView.CursorPosition = registerVal2
		-- skip the next [3] opcodes // advance 3 lines
	else
		-- r(1) = r(0).field(1) // arg0.Modes
		-- r(1) = r(1).field(2) // arg0.Modes.RegionView
		arg0.Modes.RegionView.CursorPosition = nil
	end
	-- return
end

-- r(0) = g[0] // WorldMap
-- r(0) = r(0).field(1) // WorldMap.Modes
-- r(0) = r(0).field(53) // WorldMap.Modes.StreetView
	-- OP Count: 0xA0
	-- Constant Count: 0x34
	-- Registers Count: 0xA
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.Modes.StreetView.OnEnter(arg0)
	-- r(1) = r(0):c[0] // arg0:PauseWorld
	arg0:PauseWorld()
	-- r(1) = r(0).field(2) // arg0.AutomaticCursorSlowUpdateSpeed
	arg0.AutomaticCursorUpdateSpeed = arg0.AutomaticCursorSlowUpdateSpeed
	-- r(1) = r(0).field(3) // arg0.ZoomTarget
	-- r(1) = r(1).field(4) // arg0.ZoomTarget.Entity
	-- r(1) = r(1):c[5] // arg0.ZoomTarget.Entity:GetFacing
	local registerVal1 = arg0.ZoomTarget.Entity:GetFacing()
	-- r(2) = g[8] // math
	-- r(2) = r(2).field(9) // math.deg
	-- r(3) = r(1):c[10] // (registerVal1 * -1.000000):GetAngleXY
	local registerVal2 = math.deg((registerVal1 * -1.000000):GetAngleXY())
	arg0.Rotation = -registerVal2
	-- r(2) = g[11] // ipairs
	-- r(3) = r(0).field(12) // arg0.GroundEntities
	registerVal2, registerVal3, registerVal4 = ipairs(arg0.GroundEntities)
	for index5,value6 in registerVal2, registerVal3, registerVal4 do
		-- skip the next [4] opcodes // advance 4 lines
		-- r(7) = r(6).field(4) // value6.Entity
		-- r(7) = r(7):c[13] // value6.Entity:SetSaturationMasked
		-- r(9) = false
		value6.Entity:SetSaturationMasked(false)
		-- skip the next [-6] opcodes // advance -6 lines
	end
	-- r(2) = r(0).field(3) // arg0.ZoomTarget
	-- r(2) = r(2).field(14) // arg0.ZoomTarget.Sign
	-- skip the next [41] opcodes // advance 41 lines
	-- r(2) = r(0).field(3) // arg0.ZoomTarget
	-- r(2) = r(2).field(14) // arg0.ZoomTarget.Sign
	-- r(2) = r(2):c[15] // arg0.ZoomTarget.Sign:IsAlive
	registerVal2 = arg0.ZoomTarget.Sign:IsAlive()
	if arg0.ZoomTarget.Sign and registerVal2 then
		-- r(2) = g[16] // NetOwnership
		-- r(2) = r(2).field(17) // NetOwnership.RequestOwnershipOfEntity
		-- r(3) = r(0).field(3) // arg0.ZoomTarget
		-- r(3) = r(3).field(14) // arg0.ZoomTarget.Sign
		registerVal2 = NetOwnership.RequestOwnershipOfEntity(arg0.ZoomTarget.Sign)
		if registerVal2 ~= nil then
			-- r(3) = r(0).field(19) // arg0.State
			-- r(4) = g[20] // EWorldMapState
			-- r(4) = r(4).field(21) // EWorldMapState.MAP_STATE_SPECTATOR_MODE
			-- skip the next [12] opcodes // advance 12 lines
			-- r(3) = r(0).field(19) // arg0.State
			-- r(4) = g[20] // EWorldMapState
			-- r(4) = r(4).field(22) // EWorldMapState.MAP_STATE_SPECTATOR_MODE_WEDDING_LOCATION
			if arg0.State ~= EWorldMapState.MAP_STATE_SPECTATOR_MODE and arg0.State ~= EWorldMapState.MAP_STATE_SPECTATOR_MODE_WEDDING_LOCATION then
				-- r(3) = g[23] // GUI
				-- r(3) = r(3).field(24) // GUI.DisplayRealEstateScreen
				-- r(4) = r(0).field(25) // arg0.PlayerEntity
				-- r(5) = r(0).field(3) // arg0.ZoomTarget
				-- r(5) = r(5).field(14) // arg0.ZoomTarget.Sign
				-- r(6) = r(2) // registerVal2
				GUI.DisplayRealEstateScreen(arg0.PlayerEntity, arg0.ZoomTarget.Sign, registerVal2)
			end
			-- r(3) = g[27] // EWorldMapModes
			-- r(3) = r(3).field(28) // EWorldMapModes.MAP_MODE_HOUSE
			arg0.Mode = EWorldMapModes.MAP_MODE_HOUSE
			-- r(3) = r(0).field(29) // arg0.PlaySound
			-- r(4) = c[30] // "SE_GUI_HOUSE_SELECT"
			arg0.PlaySound("SE_GUI_HOUSE_SELECT")
			-- r(3) = r(0):c[31] // arg0:SetEnvironmentTheme
			-- r(5) = r(0).field(32) // arg0.HouseEnvironmentTheme
			-- r(6) = false
			arg0:SetEnvironmentTheme(arg0.HouseEnvironmentTheme, false)
			-- skip the next [88] opcodes // advance 88 lines
		else
			-- r(2) = r(0).field(3) // arg0.ZoomTarget
			-- r(2) = r(2).field(33) // arg0.ZoomTarget.Type
			-- r(3) = g[34] // EWorldMapEntityType
			-- r(3) = r(3).field(35) // EWorldMapEntityType.MAP_ENTITY_BUILDING
			if arg0.ZoomTarget.Type == EWorldMapEntityType.MAP_ENTITY_BUILDING then
				-- r(2) = r(0).field(19) // arg0.State
				-- r(3) = g[20] // EWorldMapState
				-- r(3) = r(3).field(21) // EWorldMapState.MAP_STATE_SPECTATOR_MODE
				-- skip the next [11] opcodes // advance 11 lines
				-- r(2) = r(0).field(19) // arg0.State
				-- r(3) = g[20] // EWorldMapState
				-- r(3) = r(3).field(22) // EWorldMapState.MAP_STATE_SPECTATOR_MODE_WEDDING_LOCATION
				if arg0.State ~= EWorldMapState.MAP_STATE_SPECTATOR_MODE and arg0.State ~= EWorldMapState.MAP_STATE_SPECTATOR_MODE_WEDDING_LOCATION then
					-- r(2) = g[23] // GUI
					-- r(2) = r(2).field(36) // GUI.DisplayRealEstateScreenUnloaded
					-- r(3) = r(0).field(25) // arg0.PlayerEntity
					-- r(4) = r(0).field(3) // arg0.ZoomTarget
					-- r(4) = r(4).field(37) // arg0.ZoomTarget.EntityID
					GUI.DisplayRealEstateScreenUnloaded(arg0.PlayerEntity, arg0.ZoomTarget.EntityID)
				end
				-- r(2) = g[27] // EWorldMapModes
				-- r(2) = r(2).field(28) // EWorldMapModes.MAP_MODE_HOUSE
				arg0.Mode = EWorldMapModes.MAP_MODE_HOUSE
				-- r(2) = r(0).field(29) // arg0.PlaySound
				-- r(3) = c[30] // "SE_GUI_HOUSE_SELECT"
				arg0.PlaySound("SE_GUI_HOUSE_SELECT")
				-- r(2) = r(0):c[31] // arg0:SetEnvironmentTheme
				-- r(4) = r(0).field(32) // arg0.HouseEnvironmentTheme
				-- r(5) = false
				arg0:SetEnvironmentTheme(arg0.HouseEnvironmentTheme, false)
				-- skip the next [55] opcodes // advance 55 lines
			else
				-- r(2) = r(0).field(38) // arg0.IsQuestGiver
				-- r(3) = r(0).field(3) // arg0.ZoomTarget
				registerVal2 = arg0.IsQuestGiver(arg0.ZoomTarget)
				-- skip the next [42] opcodes // advance 42 lines
				-- r(2) = r(0).field(3) // arg0.ZoomTarget
				-- r(2) = r(2).field(39) // arg0.ZoomTarget.QuestID
				if registerVal2 and arg0.ZoomTarget.QuestID then
					-- r(2) = r(0).field(19) // arg0.State
					-- r(3) = g[20] // EWorldMapState
					-- r(3) = r(3).field(21) // EWorldMapState.MAP_STATE_SPECTATOR_MODE
					-- skip the next [41] opcodes // advance 41 lines
					-- r(2) = r(0).field(19) // arg0.State
					-- r(3) = g[20] // EWorldMapState
					-- r(3) = r(3).field(22) // EWorldMapState.MAP_STATE_SPECTATOR_MODE_WEDDING_LOCATION
					if arg0.State ~= EWorldMapState.MAP_STATE_SPECTATOR_MODE and arg0.State ~= EWorldMapState.MAP_STATE_SPECTATOR_MODE_WEDDING_LOCATION then
						-- r(2) = g[40] // QuestTracker
						-- r(2) = r(2).field(41) // QuestTracker.GetQuestInfoForHashedQuestName
						-- r(3) = r(0).field(25) // arg0.PlayerEntity
						-- r(4) = r(0).field(3) // arg0.ZoomTarget
						-- r(4) = r(4).field(39) // arg0.ZoomTarget.QuestID
						registerVal2 = QuestTracker.GetQuestInfoForHashedQuestName(arg0.PlayerEntity, arg0.ZoomTarget.QuestID)
						if registerVal2 ~= nil then
							-- r(3) = g[43] // WorldMap
							-- r(3) = r(3).field(44) // WorldMap.GuildSealsRequiredAmount
							registerVal2.GoldSealsRequired = WorldMap.GuildSealsRequiredAmount
							-- r(3) = r(0):c[45] // arg0:IsSpectator
							registerVal3 = arg0:IsSpectator()
							if registerVal3 then
								-- r(3) = g[23] // GUI
								-- r(3) = r(3).field(46) // GUI.DisplayMessageBox
								-- r(4) = r(2).field(47) // registerVal2.Description
								GUI.DisplayMessageBox(registerVal2.Description)
								-- skip the next [4] opcodes // advance 4 lines
							else
								-- r(3) = g[23] // GUI
								-- r(3) = r(3).field(48) // GUI.DisplayQuestBoxParams
								-- r(4) = r(2) // registerVal2
								GUI.DisplayQuestBoxParams(registerVal2)
							end
						end
						-- r(3) = g[27] // EWorldMapModes
						-- r(3) = r(3).field(49) // EWorldMapModes.MAP_MODE_QUEST_GIVER
						arg0.Mode = EWorldMapModes.MAP_MODE_QUEST_GIVER
						-- skip the next [8] opcodes // advance 8 lines
					else
						-- r(2) = r(0).field(3) // arg0.ZoomTarget
						-- r(2) = r(2).field(33) // arg0.ZoomTarget.Type
						-- r(3) = g[34] // EWorldMapEntityType
						-- r(3) = r(3).field(50) // EWorldMapEntityType.MAP_ENTITY_RULER_BOARD
						if arg0.ZoomTarget.Type == EWorldMapEntityType.MAP_ENTITY_RULER_BOARD then
							-- r(2) = r(0):c[51] // arg0:EnterRulerMode
							arg0:EnterRulerMode()
						end
					end
				end
			end
		end
	end
	-- return
end

-- r(0) = g[0] // WorldMap
-- r(0) = r(0).field(1) // WorldMap.Modes
-- r(0) = r(0).field(53) // WorldMap.Modes.StreetView
	-- OP Count: 0x22
	-- Constant Count: 0x13
	-- Registers Count: 0x9
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.Modes.StreetView.OnExit(arg0)
	-- r(1) = r(0):c[0] // arg0:UnpauseWorld
	arg0:UnpauseWorld()
	arg0.Rotation = nil
	-- r(1) = g[3] // ipairs
	-- r(2) = r(0).field(4) // arg0.GroundEntities
	local registerVal1, registerVal2, registerVal3 = ipairs(arg0.GroundEntities)
	for index4,value5 in registerVal1, registerVal2, registerVal3 do
		-- skip the next [4] opcodes // advance 4 lines
		-- r(6) = r(5).field(5) // value5.Entity
		-- r(6) = r(6):c[6] // value5.Entity:SetSaturationMasked
		-- r(8) = true
		value5.Entity:SetSaturationMasked(true)
		-- skip the next [-6] opcodes // advance -6 lines
	end
	-- r(1) = r(0).field(7) // arg0.Mode
	-- r(2) = g[8] // EWorldMapModes
	-- r(2) = r(2).field(9) // EWorldMapModes.MAP_MODE_HOUSE
	if arg0.Mode == EWorldMapModes.MAP_MODE_HOUSE then
		-- r(1) = g[10] // GUI
		-- r(1) = r(1).field(11) // GUI.CloseInteractionMode
		GUI.CloseInteractionMode()
		-- r(1) = g[10] // GUI
		-- r(1) = r(1).field(12) // GUI.DisplayWorldMapScreen
		-- r(2) = true
		-- r(3) = r(0).field(13) // arg0.PlayerEntity
		GUI.DisplayWorldMapScreen(true, arg0.PlayerEntity)
		-- r(1) = r(0).field(14) // arg0.PlaySound
		-- r(2) = c[15] // "SE_GUI_HOUSE_DESELECT"
		arg0.PlaySound("SE_GUI_HOUSE_DESELECT")
	end
	-- r(1) = g[8] // EWorldMapModes
	-- r(1) = r(1).field(16) // EWorldMapModes.MAP_MODE_ZOOM
	arg0.Mode = EWorldMapModes.MAP_MODE_ZOOM
	arg0.ResetCursorUpdateSpeedWhenFinishedAnimating = true
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0xC8
	-- Constant Count: 0x34
	-- Registers Count: 0xE
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.SetMode(arg0, arg1, arg2, arg3)
	-- r(4) = false
	-- r(5) = r(0).field(1) // arg0.CurrentMode
	arg0.OldMode = arg0.CurrentMode
	-- r(5) = r(0).field(1) // arg0.CurrentMode
	if arg0.CurrentMode then
		-- r(5) = r(0).field(1) // arg0.CurrentMode
		-- r(5) = r(5).field(2) // arg0.CurrentMode.ExitSounds
		-- skip the next [15] opcodes // advance 15 lines
		-- r(5) = r(1).field(3) // arg1.Name
		-- skip the next [12] opcodes // advance 12 lines
		-- r(5) = r(0).field(1) // arg0.CurrentMode
		-- r(5) = r(5).field(2) // arg0.CurrentMode.ExitSounds
		-- r(6) = r(1).field(3) // arg1.Name
		-- r(5) = r(5)[r(6)] // arg0.CurrentMode.ExitSounds[arg1.Name]
		if arg0.CurrentMode.ExitSounds and arg1.Name and arg0.CurrentMode.ExitSounds[arg1.Name] then
			-- r(5) = r(0).field(4) // arg0.PlaySound
			-- r(6) = r(0).field(1) // arg0.CurrentMode
			-- r(6) = r(6).field(2) // arg0.CurrentMode.ExitSounds
			-- r(7) = r(1).field(3) // arg1.Name
			-- r(6) = r(6)[r(7)] // arg0.CurrentMode.ExitSounds[arg1.Name]
			arg0.PlaySound(arg0.CurrentMode.ExitSounds[arg1.Name])
		end
		-- r(5) = r(0).field(1) // arg0.CurrentMode
		-- r(5) = r(5).field(5) // arg0.CurrentMode.OnExit
		if arg0.CurrentMode.OnExit then
			-- r(5) = r(0).field(1) // arg0.CurrentMode
			-- r(5) = r(5).field(5) // arg0.CurrentMode.OnExit
			-- r(6) = r(0) // arg0
			arg0.CurrentMode.OnExit(arg0)
		end
		-- r(4) = true
	end
	-- r(5) = (arg2 or arg3)
	-- skip the next [1] opcodes // advance 1 lines
	-- r(5) = c[6] // 0.000000
	arg0.CurrentMode = arg1
	-- skip the next [22] opcodes // advance 22 lines
	-- r(6) = r(0).field(0) // arg0.OldMode
	-- r(6) = r(6).field(3) // arg0.OldMode.Name
	-- skip the next [18] opcodes // advance 18 lines
	-- r(6) = r(0).field(1) // arg0.CurrentMode
	-- r(6) = r(6).field(7) // arg0.CurrentMode.EnterSounds
	-- skip the next [14] opcodes // advance 14 lines
	-- r(6) = r(0).field(1) // arg0.CurrentMode
	-- r(6) = r(6).field(7) // arg0.CurrentMode.EnterSounds
	-- r(7) = r(0).field(0) // arg0.OldMode
	-- r(7) = r(7).field(3) // arg0.OldMode.Name
	-- r(6) = r(6)[r(7)] // arg0.CurrentMode.EnterSounds[arg0.OldMode.Name]
	if true and arg0.OldMode.Name and arg0.CurrentMode.EnterSounds and arg0.CurrentMode.EnterSounds[arg0.OldMode.Name] then
		-- r(6) = r(0).field(4) // arg0.PlaySound
		-- r(7) = r(0).field(1) // arg0.CurrentMode
		-- r(7) = r(7).field(7) // arg0.CurrentMode.EnterSounds
		-- r(8) = r(0).field(0) // arg0.OldMode
		-- r(8) = r(8).field(3) // arg0.OldMode.Name
		-- r(7) = r(7)[r(8)] // arg0.CurrentMode.EnterSounds[arg0.OldMode.Name]
		arg0.PlaySound(arg0.CurrentMode.EnterSounds[arg0.OldMode.Name])
	end
	-- r(6) = r(0).field(1) // arg0.CurrentMode
	-- r(6) = r(6).field(8) // arg0.CurrentMode.OnEnter
	if arg0.CurrentMode.OnEnter then
		-- r(6) = r(0).field(1) // arg0.CurrentMode
		-- r(6) = r(6).field(8) // arg0.CurrentMode.OnEnter
		-- r(7) = r(0) // arg0
		arg0.CurrentMode.OnEnter(arg0)
	end
	-- r(6) = r(0).field(1) // arg0.CurrentMode
	-- r(6) = r(6).field(10) // arg0.CurrentMode.Dist
	arg0.DistanceAdjustment = arg0.CurrentMode.Dist
	-- r(6) = r(0).field(1) // arg0.CurrentMode
	-- r(6) = r(6).field(12) // arg0.CurrentMode.Tilt
	arg0.PitchAdjustment = arg0.CurrentMode.Tilt
	arg0.UserRotation = 0.000000
	arg0.YawAdjustment = 0.000000
	arg0.UserRotationCounter = 0.000000
	-- r(6) = r(0).field(1) // arg0.CurrentMode
	-- r(7) = r(0).field(16) // arg0.Modes
	-- r(7) = r(7).field(17) // arg0.Modes.StreetView
	-- skip the next [14] opcodes // advance 14 lines
	-- r(6) = r(0).field(18) // arg0.ZoomTarget
	-- skip the next [11] opcodes // advance 11 lines
	-- r(6) = r(0).field(18) // arg0.ZoomTarget
	-- r(6) = r(6).field(19) // arg0.ZoomTarget.ZoomDistance
	-- skip the next [7] opcodes // advance 7 lines
	-- r(6) = r(0).field(18) // arg0.ZoomTarget
	-- r(6) = r(6).field(19) // arg0.ZoomTarget.ZoomDistance
	if arg0.CurrentMode == arg0.Modes.StreetView and arg0.ZoomTarget and arg0.ZoomTarget.ZoomDistance and arg0.ZoomTarget.ZoomDistance ~= 0.000000 then
		-- r(6) = r(0).field(18) // arg0.ZoomTarget
		-- r(6) = r(6).field(19) // arg0.ZoomTarget.ZoomDistance
		arg0.DistanceAdjustment = arg0.ZoomTarget.ZoomDistance
	end
	-- r(6) = r(0).field(20) // arg0.Camera
	-- r(6) = r(6).field(21) // arg0.Camera.GetFocalPos
	local registerVal6 = arg0.Camera.GetFocalPos()
	-- r(7) = r(0).field(1) // arg0.CurrentMode
	-- r(7) = r(7).field(22) // arg0.CurrentMode.Cursor
	-- r(8) = r(0).field(1) // arg0.CurrentMode
	-- r(8) = r(8).field(23) // arg0.CurrentMode.CursorGraphic
	-- r(9) = r(0).field(18) // arg0.ZoomTarget
	if arg0.ZoomTarget then
		-- r(9) = r(0).field(18) // arg0.ZoomTarget
		-- r(9) = r(9).field(24) // arg0.ZoomTarget.Entity
		-- r(9) = r(9):c[25] // arg0.ZoomTarget.Entity:GetPos
		local registerVal9 = arg0.ZoomTarget.Entity:GetPos()
		-- r(6) = r(9) // registerVal9
		-- r(9) = r(0).field(18) // arg0.ZoomTarget
		-- r(9) = r(9).field(26) // arg0.ZoomTarget.Height
		if arg0.ZoomTarget.Height then
			-- r(9) = g[27] // CVector3
			-- r(10) = c[6] // 0.000000
			-- r(11) = c[6] // 0.000000
			-- r(12) = r(0).field(18) // arg0.ZoomTarget
			-- r(12) = r(12).field(26) // arg0.ZoomTarget.Height
			registerVal9 = CVector3(0.000000, 0.000000, arg0.ZoomTarget.Height)
			-- skip the next [3] opcodes // advance 3 lines
		else
			-- r(9) = r(6):c[28] // (registerVal9 + registerVal9):SetZ
			-- r(11) = c[6] // 0.000000
			(registerVal9 + registerVal9):SetZ(0.000000)
		end
	end
	-- r(9) = r(0).field(29) // arg0.ModeChangeOverridePosition
	-- r(6) = (arg0.ModeChangeOverridePosition or 0.000000)
	-- skip the next [2] opcodes // advance 2 lines
	-- r(6) = (arg3 or true)
	-- skip the next [0] opcodes // advance 0 lines
	arg0.ModeChangeOverridePosition = nil
	arg0.FocusPosition = (arg3 or true)
	arg0.FramesSinceLastMoved = 0.000000
	-- r(9) = r(0):c[33] // arg0:FocusOn
	-- r(11) = r(6) // (arg3 or true)
	-- r(12) = r(5) // 0.000000
	-- r(13) = c[34] // 0.800000
	arg0:FocusOn((arg3 or true), 0.000000, 0.800000)
	arg0.InTransitionAnimation = true
	-- r(9) = r(0).field(22) // arg0.Cursor
	-- r(9) = r(9).field(37) // arg0.Cursor.IsSprite
	if arg0.Cursor.IsSprite then
		-- r(9) = g[38] // DeepCopyTable
		-- r(10) = r(8) // arg0.CurrentMode.CursorGraphic
		registerVal9 = DeepCopyTable(arg0.CurrentMode.CursorGraphic)
		-- r(8) = r(9) // registerVal9
		-- r(9) = r(8).field(39) // registerVal9.Scale
		-- r(10) = r(0).field(1) // arg0.CurrentMode
		-- r(10) = r(10).field(40) // arg0.CurrentMode.SpriteScaleMultiply
		registerVal9.Scale = (registerVal9.Scale * arg0.CurrentMode.SpriteScaleMultiply)
	end
	-- r(9) = r(0):c[41] // arg0:AnimateCursorGraphic
	local registerVal11 = {}
	local registerVal12 = {}
	registerVal12[0.000000] = registerVal9
	registerVal11.Keyframes = registerVal12
	registerVal11.UseSinusoidalInterpolation = true
	arg0:AnimateCursorGraphic(registerVal11)
	arg0.CurrentMode.Cursor.Position = (arg3 or true)
	-- r(9) = r(0).field(45) // arg0.Animate
	-- r(10) = r(0).field(22) // arg0.Cursor
	registerVal11 = {}
	registerVal12 = {}
	registerVal12[0.000000] = arg0.CurrentMode.Cursor
	registerVal11.Keyframes = registerVal12
	arg0.Animate(arg0.Cursor, registerVal11)
	arg0.WaitForCursor = true
	-- r(9) = r(0).field(47) // arg0.CursorLight
	-- skip the next [11] opcodes // advance 11 lines
	-- r(9) = r(0).field(47) // arg0.CursorLight
	-- r(9) = r(9).field(48) // arg0.CursorLight.Light
	if arg0.CursorLight and arg0.CursorLight.Light then
		-- r(9) = r(0).field(47) // arg0.CursorLight
		-- r(9) = r(9).field(48) // arg0.CursorLight.Light
		-- r(9) = r(9).field(24) // arg0.CursorLight.Light.Entity
		-- r(9) = r(9):c[49] // arg0.CursorLight.Light.Entity:SetParams
		-- r(11) = r(0).field(1) // arg0.CurrentMode
		-- r(11) = r(11).field(50) // arg0.CurrentMode.CursorLightParams
		arg0.CursorLight.Light.Entity:SetParams(arg0.CurrentMode.CursorLightParams)
	end
	-- r(9) = r(0).field(51) // arg0.CursorLight2
	-- skip the next [11] opcodes // advance 11 lines
	-- r(9) = r(0).field(51) // arg0.CursorLight2
	-- r(9) = r(9).field(48) // arg0.CursorLight2.Light
	if arg0.CursorLight2 and arg0.CursorLight2.Light then
		-- r(9) = r(0).field(51) // arg0.CursorLight2
		-- r(9) = r(9).field(48) // arg0.CursorLight2.Light
		-- r(9) = r(9).field(24) // arg0.CursorLight2.Light.Entity
		-- r(9) = r(9):c[49] // arg0.CursorLight2.Light.Entity:SetParams
		-- r(11) = r(0).field(1) // arg0.CurrentMode
		-- r(11) = r(11).field(50) // arg0.CurrentMode.CursorLightParams
		arg0.CursorLight2.Light.Entity:SetParams(arg0.CurrentMode.CursorLightParams)
	end
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0x42
	-- Constant Count: 0x14
	-- Registers Count: 0x3
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.GetState(arg0)
	-- r(1) = r(0).field(0) // arg0.State
	-- r(2) = g[1] // EWorldMapState
	-- r(2) = r(2).field(2) // EWorldMapState.MAP_STATE_DEFAULT
	-- skip the next [58] opcodes // advance 58 lines
	-- r(1) = r(0):c[3] // arg0:GetView
	local registerVal1 = arg0:GetView()
	-- r(2) = g[4] // EWorldMapView
	-- r(2) = r(2).field(5) // EWorldMapView.MAP_VIEW_REGION
	-- skip the next [52] opcodes // advance 52 lines
	-- r(1) = r(0).field(6) // arg0.Target
	if arg0.State == EWorldMapState.MAP_STATE_DEFAULT and registerVal1 == EWorldMapView.MAP_VIEW_REGION and arg0.Target then
		-- r(1) = r(0).field(7) // arg0.IsQuestGiver
		-- r(2) = r(0).field(6) // arg0.Target
		registerVal1 = arg0.IsQuestGiver(arg0.Target)
		if registerVal1 then
			-- r(1) = g[1] // EWorldMapState
			-- r(1) = r(1).field(8) // EWorldMapState.MAP_STATE_VIEW_CHARACTER
			return EWorldMapState.MAP_STATE_VIEW_CHARACTER
			-- skip the next [40] opcodes // advance 40 lines
		else
			-- r(1) = r(0).field(6) // arg0.Target
			-- r(1) = r(1).field(9) // arg0.Target.Type
			-- r(2) = g[10] // EWorldMapEntityType
			-- r(2) = r(2).field(11) // EWorldMapEntityType.MAP_ENTITY_SOLDIER
			if arg0.Target.Type == EWorldMapEntityType.MAP_ENTITY_SOLDIER then
				-- r(1) = g[1] // EWorldMapState
				-- r(1) = r(1).field(12) // EWorldMapState.MAP_STATE_VIEW_SOLDIER
				return EWorldMapState.MAP_STATE_VIEW_SOLDIER
				-- skip the next [30] opcodes // advance 30 lines
			else
				-- r(1) = r(0).field(6) // arg0.Target
				-- r(1) = r(1).field(9) // arg0.Target.Type
				-- r(2) = g[10] // EWorldMapEntityType
				-- r(2) = r(2).field(13) // EWorldMapEntityType.MAP_ENTITY_BUILDING
				if arg0.Target.Type == EWorldMapEntityType.MAP_ENTITY_BUILDING then
					-- r(1) = r(0).field(14) // arg0.Family
					-- skip the next [8] opcodes // advance 8 lines
					-- r(1) = r(0).field(14) // arg0.Family
					if arg0.Family and 0.000000 < #arg0.Family then
						-- r(1) = g[1] // EWorldMapState
						-- r(1) = r(1).field(16) // EWorldMapState.MAP_STATE_VIEW_FAMILY_HOUSE
						return EWorldMapState.MAP_STATE_VIEW_FAMILY_HOUSE
						-- skip the next [13] opcodes // advance 13 lines
					else
						-- r(1) = g[1] // EWorldMapState
						-- r(1) = r(1).field(17) // EWorldMapState.MAP_STATE_VIEW_HOUSE
						return EWorldMapState.MAP_STATE_VIEW_HOUSE
						-- skip the next [9] opcodes // advance 9 lines
					else
						-- r(1) = r(0).field(6) // arg0.Target
						-- r(1) = r(1).field(9) // arg0.Target.Type
						-- r(2) = g[10] // EWorldMapEntityType
						-- r(2) = r(2).field(18) // EWorldMapEntityType.MAP_ENTITY_ORB
						if arg0.Target.Type == EWorldMapEntityType.MAP_ENTITY_ORB then
							-- r(1) = g[1] // EWorldMapState
							-- r(1) = r(1).field(19) // EWorldMapState.MAP_STATE_VIEW_ORB
							return EWorldMapState.MAP_STATE_VIEW_ORB
						end
					end
				end
			end
		end
	end
	-- r(1) = r(0).field(0) // arg0.State
	return arg0.State
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0x1E
	-- Constant Count: 0xA
	-- Registers Count: 0x3
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.GetView(arg0)
	-- r(1) = r(0).field(0) // arg0.CurrentMode
	-- r(2) = r(0).field(1) // arg0.Modes
	-- r(2) = r(2).field(2) // arg0.Modes.RegionView
	if arg0.CurrentMode == arg0.Modes.RegionView then
		-- r(1) = g[3] // EWorldMapView
		-- r(1) = r(1).field(4) // EWorldMapView.MAP_VIEW_REGION
		return EWorldMapView.MAP_VIEW_REGION
		-- skip the next [17] opcodes // advance 17 lines
	else
		-- r(1) = r(0).field(0) // arg0.CurrentMode
		-- r(2) = r(0).field(1) // arg0.Modes
		-- r(2) = r(2).field(5) // arg0.Modes.WorldView
		if arg0.CurrentMode == arg0.Modes.WorldView then
			-- r(1) = g[3] // EWorldMapView
			-- r(1) = r(1).field(6) // EWorldMapView.MAP_VIEW_WORLD
			return EWorldMapView.MAP_VIEW_WORLD
			-- skip the next [8] opcodes // advance 8 lines
		else
			-- r(1) = r(0).field(0) // arg0.CurrentMode
			-- r(2) = r(0).field(1) // arg0.Modes
			-- r(2) = r(2).field(7) // arg0.Modes.StreetView
			if arg0.CurrentMode == arg0.Modes.StreetView then
				-- r(1) = g[3] // EWorldMapView
				-- r(1) = r(1).field(8) // EWorldMapView.MAP_VIEW_STREET
				return EWorldMapView.MAP_VIEW_STREET
			end
		end
	end
	-- r(1) = g[3] // EWorldMapView
	-- r(1) = r(1).field(9) // EWorldMapView.MAP_VIEW_NONE
	return EWorldMapView.MAP_VIEW_NONE
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0x3
	-- Constant Count: 0x1
	-- Registers Count: 0x2
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.IsInSelectionMode(arg0)
	-- r(1) = r(0).field(0) // arg0.SelectionMode
	return arg0.SelectionMode
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0xE
	-- Constant Count: 0x5
	-- Registers Count: 0x3
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.IsInMarriageSelectionMode(arg0)
	-- r(1) = r(0):c[0] // arg0:IsInSelectionMode
	local registerVal1 = arg0:IsInSelectionMode()
	if registerVal1 then
		-- r(1) = r(0).field(1) // arg0.SelectionModeType
		-- r(2) = g[2] // WorldMap
		-- r(2) = r(2).field(3) // WorldMap.SelectionModeTypeEnum
		-- r(2) = r(2).field(4) // WorldMap.SelectionModeTypeEnum.MARRIAGE
		if arg0.SelectionModeType ~= WorldMap.SelectionModeTypeEnum.MARRIAGE then
			-- r(1) = false // skip next opcode
		end
		-- r(1) = true
	end
	return true
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0xE
	-- Constant Count: 0x5
	-- Registers Count: 0x3
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.IsInAdoptionSelectionMode(arg0)
	-- r(1) = r(0):c[0] // arg0:IsInSelectionMode
	local registerVal1 = arg0:IsInSelectionMode()
	if registerVal1 then
		-- r(1) = r(0).field(1) // arg0.SelectionModeType
		-- r(2) = g[2] // WorldMap
		-- r(2) = r(2).field(3) // WorldMap.SelectionModeTypeEnum
		-- r(2) = r(2).field(4) // WorldMap.SelectionModeTypeEnum.ADOPTION
		if arg0.SelectionModeType ~= WorldMap.SelectionModeTypeEnum.ADOPTION then
			-- r(1) = false // skip next opcode
		end
		-- r(1) = true
	end
	return true
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0x3E
	-- Constant Count: 0x15
	-- Registers Count: 0x4
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.GetTargetName(arg0)
	-- r(1) = r(0).field(0) // arg0.Target
	if arg0.Target then
		-- r(1) = r(0).field(1) // arg0.IsQuestGiver
		-- r(2) = r(0).field(0) // arg0.Target
		local registerVal1 = arg0.IsQuestGiver(arg0.Target)
		if registerVal1 then
			-- r(1) = g[2] // QuestTracker
			-- r(1) = r(1).field(3) // QuestTracker.GetQuestInfoForHashedQuestName
			-- r(2) = r(0).field(4) // arg0.PlayerEntity
			-- r(3) = r(0).field(0) // arg0.Target
			-- r(3) = r(3).field(5) // arg0.Target.QuestID
			registerVal1 = QuestTracker.GetQuestInfoForHashedQuestName(arg0.PlayerEntity, arg0.Target.QuestID)
			-- skip the next [43] opcodes // advance 43 lines
			-- r(2) = r(1).field(7) // registerVal1.Name
			if registerVal1 ~= nil and registerVal1.Name ~= nil then
				-- r(2) = r(1).field(7) // registerVal1.Name
				return registerVal1.Name
				-- skip the next [37] opcodes // advance 37 lines
			else
				-- r(1) = r(0).field(0) // arg0.Target
				-- r(1) = r(1).field(8) // arg0.Target.Type
				-- r(2) = g[9] // EWorldMapEntityType
				-- r(2) = r(2).field(10) // EWorldMapEntityType.MAP_ENTITY_ORB
				if arg0.Target.Type == EWorldMapEntityType.MAP_ENTITY_ORB then
					-- r(1) = r(0).field(11) // arg0.GetOrbName
					-- r(2) = r(0).field(0) // arg0.Target
					-- r(2) = r(2).field(12) // arg0.Target.XUID
					return arg0.GetOrbName(arg0.Target.XUID)
					-- return
					-- skip the next [25] opcodes // advance 25 lines
				else
					-- r(1) = r(0).field(0) // arg0.Target
					-- r(1) = r(1).field(8) // arg0.Target.Type
					-- r(2) = g[9] // EWorldMapEntityType
					-- r(2) = r(2).field(13) // EWorldMapEntityType.MAP_ENTITY_BUILDING
					if arg0.Target.Type == EWorldMapEntityType.MAP_ENTITY_BUILDING then
						-- r(1) = g[14] // PlayerProperties
						-- r(1) = r(1).field(15) // PlayerProperties.IsPropertyInLists
						-- r(2) = g[16] // GetGameOwningHeroFromGameWorld
						local registerVal2 = GetGameOwningHeroFromGameWorld()
						-- r(3) = r(0).field(0) // arg0.Target
						-- r(3) = r(3).field(17) // arg0.Target.EntityID
						registerVal1 = PlayerProperties.IsPropertyInLists(registerVal2, arg0.Target.EntityID)
						if registerVal1 then
							-- r(1) = g[14] // PlayerProperties
							-- r(1) = r(1).field(18) // PlayerProperties.GetName
							-- r(2) = g[16] // GetGameOwningHeroFromGameWorld
							registerVal2 = GetGameOwningHeroFromGameWorld()
							-- r(3) = r(0).field(0) // arg0.Target
							-- r(3) = r(3).field(17) // arg0.Target.EntityID
							return PlayerProperties.GetName(registerVal2, arg0.Target.EntityID)
							-- return
						end
						-- r(1) = c[19] // "Debug: No data for this building"
						return "Debug: No data for this building"
					end
				end
			end
		end
	end
	-- r(1) = c[20] // ""
	return ""
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0x46
	-- Constant Count: 0x16
	-- Registers Count: 0x5
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.GetTargetText1(arg0)
	-- r(1) = r(0).field(0) // arg0.Target
	if arg0.Target then
		-- r(1) = r(0).field(1) // arg0.IsQuestGiver
		-- r(2) = r(0).field(0) // arg0.Target
		local registerVal1 = arg0.IsQuestGiver(arg0.Target)
		if registerVal1 then
			-- r(1) = g[2] // QuestTracker
			-- r(1) = r(1).field(3) // QuestTracker.GetQuestInfoForHashedQuestName
			-- r(2) = r(0).field(4) // arg0.PlayerEntity
			-- r(3) = r(0).field(0) // arg0.Target
			-- r(3) = r(3).field(5) // arg0.Target.QuestID
			registerVal1 = QuestTracker.GetQuestInfoForHashedQuestName(arg0.PlayerEntity, arg0.Target.QuestID)
			if registerVal1 ~= nil then
				-- r(2) = g[2] // QuestTracker
				-- r(2) = r(2).field(7) // QuestTracker.HasQuestGotActiveObjectives
				-- r(3) = r(0).field(4) // arg0.PlayerEntity
				-- r(4) = r(0).field(0) // arg0.Target
				-- r(4) = r(4).field(5) // arg0.Target.QuestID
				local registerVal2 = QuestTracker.HasQuestGotActiveObjectives(arg0.PlayerEntity, arg0.Target.QuestID)
				-- skip the next [6] opcodes // advance 6 lines
				-- r(2) = r(1).field(8) // registerVal1.ActiveObjective
				if registerVal2 and registerVal1.ActiveObjective ~= nil then
					-- r(2) = r(1).field(8) // registerVal1.ActiveObjective
					return registerVal1.ActiveObjective
					-- skip the next [37] opcodes // advance 37 lines
				else
					-- r(2) = r(1).field(9) // registerVal1.Description
					return registerVal1.Description
					-- skip the next [34] opcodes // advance 34 lines
				else
					-- r(1) = r(0).field(0) // arg0.Target
					-- r(1) = r(1).field(10) // arg0.Target.Type
					-- r(2) = g[11] // EWorldMapEntityType
					-- r(2) = r(2).field(12) // EWorldMapEntityType.MAP_ENTITY_ORB
					if arg0.Target.Type == EWorldMapEntityType.MAP_ENTITY_ORB then
						-- r(1) = c[13] // "TEXT_GUI_ORB_NOT_ONLINE"
						return "TEXT_GUI_ORB_NOT_ONLINE"
						-- skip the next [25] opcodes // advance 25 lines
					else
						-- r(1) = r(0).field(0) // arg0.Target
						-- r(1) = r(1).field(10) // arg0.Target.Type
						-- r(2) = g[11] // EWorldMapEntityType
						-- r(2) = r(2).field(14) // EWorldMapEntityType.MAP_ENTITY_BUILDING
						if arg0.Target.Type == EWorldMapEntityType.MAP_ENTITY_BUILDING then
							-- r(1) = g[15] // PlayerProperties
							-- r(1) = r(1).field(16) // PlayerProperties.IsPropertyInLists
							-- r(2) = g[17] // GetGameOwningHeroFromGameWorld
							registerVal2 = GetGameOwningHeroFromGameWorld()
							-- r(3) = r(0).field(0) // arg0.Target
							-- r(3) = r(3).field(18) // arg0.Target.EntityID
							registerVal1 = PlayerProperties.IsPropertyInLists(registerVal2, arg0.Target.EntityID)
							if registerVal1 then
								-- r(1) = g[15] // PlayerProperties
								-- r(1) = r(1).field(19) // PlayerProperties.GetAnecdotes
								-- r(2) = g[17] // GetGameOwningHeroFromGameWorld
								registerVal2 = GetGameOwningHeroFromGameWorld()
								-- r(3) = r(0).field(0) // arg0.Target
								-- r(3) = r(3).field(18) // arg0.Target.EntityID
								return PlayerProperties.GetAnecdotes(registerVal2, arg0.Target.EntityID)
								-- return
							end
							-- r(1) = c[20] // "Debug: Only raise this as a bug"
							return "Debug: Only raise this as a bug"
						end
					end
				end
			end
		end
	end
	-- r(1) = c[21] // ""
	return ""
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0x26
	-- Constant Count: 0x11
	-- Registers Count: 0x4
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.GetTargetText2(arg0)
	-- r(1) = r(0).field(0) // arg0.Target
	if arg0.Target then
		-- r(1) = r(0).field(1) // arg0.IsQuestGiver
		-- r(2) = r(0).field(0) // arg0.Target
		local registerVal1 = arg0.IsQuestGiver(arg0.Target)
		-- skip the next [10] opcodes // advance 10 lines
		-- r(1) = g[2] // QuestTracker
		-- r(1) = r(1).field(3) // QuestTracker.GetQuestInfoForHashedQuestName
		-- r(2) = r(0).field(4) // arg0.PlayerEntity
		-- r(3) = r(0).field(0) // arg0.Target
		-- r(3) = r(3).field(5) // arg0.Target.QuestID
		registerVal1 = QuestTracker.GetQuestInfoForHashedQuestName(arg0.PlayerEntity, arg0.Target.QuestID)
		if registerVal1 and registerVal1 ~= nil then
			-- r(2) = r(1).field(7) // registerVal1.ObjectiveParam1
			return registerVal1.ObjectiveParam1
		end
		-- r(1) = r(0).field(0) // arg0.Target
		-- r(1) = r(1).field(8) // arg0.Target.Type
		-- r(2) = g[9] // EWorldMapEntityType
		-- r(2) = r(2).field(10) // EWorldMapEntityType.MAP_ENTITY_BUILDING
		-- skip the next [11] opcodes // advance 11 lines
		-- r(1) = g[11] // PlayerProperties
		-- r(1) = r(1).field(12) // PlayerProperties.IsPropertyInLists
		-- r(2) = g[13] // GetGameOwningHeroFromGameWorld
		local registerVal2 = GetGameOwningHeroFromGameWorld()
		-- r(3) = r(0).field(0) // arg0.Target
		-- r(3) = r(3).field(14) // arg0.Target.EntityID
		registerVal1 = PlayerProperties.IsPropertyInLists(registerVal2, arg0.Target.EntityID)
		if arg0.Target.Type == EWorldMapEntityType.MAP_ENTITY_BUILDING and not registerVal1 then
			-- r(1) = c[15] // "Debug: If you've been to this level"
			return "Debug: If you've been to this level"
		end
	end
	-- r(1) = c[16] // ""
	return ""
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0x26
	-- Constant Count: 0x11
	-- Registers Count: 0x4
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.GetTargetText3(arg0)
	-- r(1) = r(0).field(0) // arg0.Target
	if arg0.Target then
		-- r(1) = r(0).field(1) // arg0.IsQuestGiver
		-- r(2) = r(0).field(0) // arg0.Target
		local registerVal1 = arg0.IsQuestGiver(arg0.Target)
		-- skip the next [10] opcodes // advance 10 lines
		-- r(1) = g[2] // QuestTracker
		-- r(1) = r(1).field(3) // QuestTracker.GetQuestInfoForHashedQuestName
		-- r(2) = r(0).field(4) // arg0.PlayerEntity
		-- r(3) = r(0).field(0) // arg0.Target
		-- r(3) = r(3).field(5) // arg0.Target.QuestID
		registerVal1 = QuestTracker.GetQuestInfoForHashedQuestName(arg0.PlayerEntity, arg0.Target.QuestID)
		if registerVal1 and registerVal1 ~= nil then
			-- r(2) = r(1).field(7) // registerVal1.ObjectiveParam2
			return registerVal1.ObjectiveParam2
		end
		-- r(1) = r(0).field(0) // arg0.Target
		-- r(1) = r(1).field(8) // arg0.Target.Type
		-- r(2) = g[9] // EWorldMapEntityType
		-- r(2) = r(2).field(10) // EWorldMapEntityType.MAP_ENTITY_BUILDING
		-- skip the next [11] opcodes // advance 11 lines
		-- r(1) = g[11] // PlayerProperties
		-- r(1) = r(1).field(12) // PlayerProperties.IsPropertyInLists
		-- r(2) = g[13] // GetGameOwningHeroFromGameWorld
		local registerVal2 = GetGameOwningHeroFromGameWorld()
		-- r(3) = r(0).field(0) // arg0.Target
		-- r(3) = r(3).field(14) // arg0.Target.EntityID
		registerVal1 = PlayerProperties.IsPropertyInLists(registerVal2, arg0.Target.EntityID)
		if arg0.Target.Type == EWorldMapEntityType.MAP_ENTITY_BUILDING and not registerVal1 then
			-- r(1) = c[15] // "Debug: In-game"
			return "Debug: In-game"
		end
	end
	-- r(1) = c[16] // ""
	return ""
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0x7
	-- Constant Count: 0x2
	-- Registers Count: 0x2
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.HasTarget(arg0)
	-- r(1) = r(0).field(0) // arg0.Target
	if arg0.Target == nil then
		-- r(1) = false // skip next opcode
	end
	-- r(1) = true
	return true
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0xD
	-- Constant Count: 0x3
	-- Registers Count: 0x2
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.GetTargetID(arg0)
	-- r(1) = r(0).field(0) // arg0.Target
	-- skip the next [7] opcodes // advance 7 lines
	-- r(1) = r(0).field(0) // arg0.Target
	-- r(1) = r(1).field(1) // arg0.Target.EntityID
	if arg0.Target and arg0.Target.EntityID then
		-- r(1) = r(0).field(0) // arg0.Target
		-- r(1) = r(1).field(1) // arg0.Target.EntityID
		return arg0.Target.EntityID
	end
	-- r(1) = c[2] // ""
	return ""
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0xD
	-- Constant Count: 0x3
	-- Registers Count: 0x2
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.GetQuestID(arg0)
	-- r(1) = r(0).field(0) // arg0.Target
	-- skip the next [7] opcodes // advance 7 lines
	-- r(1) = r(0).field(0) // arg0.Target
	-- r(1) = r(1).field(1) // arg0.Target.QuestID
	if arg0.Target and arg0.Target.QuestID then
		-- r(1) = r(0).field(0) // arg0.Target
		-- r(1) = r(1).field(1) // arg0.Target.QuestID
		return arg0.Target.QuestID
	end
	-- r(1) = c[2] // ""
	return ""
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0x8
	-- Constant Count: 0x3
	-- Registers Count: 0x2
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.GetOldHouseID(arg0)
	-- r(1) = r(0).field(0) // arg0.OldHouseID
	if arg0.OldHouseID ~= nil then
		-- r(1) = r(0).field(0) // arg0.OldHouseID
		return arg0.OldHouseID
	end
	-- r(1) = c[2] // ""
	return ""
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0x16
	-- Constant Count: 0x4
	-- Registers Count: 0x7
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.IsSaleOrShortageForEntity(arg0)
	-- r(1) = r(0).field(0) // arg0.Target
	-- skip the next [16] opcodes // advance 16 lines
	-- r(1) = r(0).field(0) // arg0.Target
	-- r(1) = r(1).field(1) // arg0.Target.EntityID
	-- skip the next [12] opcodes // advance 12 lines
	-- r(1) = g[2] // pairs
	-- r(2) = r(0).field(3) // arg0.ActiveSalesAndShortages
	local registerVal1, registerVal2, registerVal3 = pairs(arg0.ActiveSalesAndShortages)
	for index4,value5 in registerVal1, registerVal2, registerVal3 do
		-- skip the next [6] opcodes // advance 6 lines
		-- r(6) = r(0).field(0) // arg0.Target
		-- r(6) = r(6).field(1) // arg0.Target.EntityID
		if arg0.Target.EntityID == value5 then
			-- r(6) = true
			return true
		end
		-- skip the next [-8] opcodes // advance -8 lines
	end
	-- r(1) = false
	return false
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0x55
	-- Constant Count: 0x1A
	-- Registers Count: 0x10
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.PauseWorld(arg0)
	local registerVal1 = {}
	local registerVal2 = {}
	local registerVal3 = {}
	local registerVal4 = {}
	registerVal4.A = 0.000000
	registerVal3.Colour = registerVal4
	registerVal2[0.500000] = registerVal3
	registerVal1.Keyframes = registerVal2
	-- r(2 to 4) inclusive = nil
	-- r(5) = r(0).field(5) // arg0.ZoomTarget
	-- skip the next [69] opcodes // advance 69 lines
	-- r(5) = r(0).field(5) // arg0.ZoomTarget
	-- r(5) = r(5).field(6) // arg0.ZoomTarget.Entity
	-- r(5) = r(5).field(7) // arg0.ZoomTarget.Entity.GetFacing
	-- skip the next [64] opcodes // advance 64 lines
	-- r(5) = r(0).field(5) // arg0.ZoomTarget
	-- r(5) = r(5).field(6) // arg0.ZoomTarget.Entity
	-- r(5) = r(5):c[8] // arg0.ZoomTarget.Entity:GetPos
	local registerVal5 = arg0.ZoomTarget.Entity:GetPos()
	-- r(2) = r(5) // registerVal5
	-- r(5) = r(0).field(5) // arg0.ZoomTarget
	-- r(5) = r(5).field(6) // arg0.ZoomTarget.Entity
	-- r(5) = r(5):c[7] // arg0.ZoomTarget.Entity:GetFacing
	registerVal5 = arg0.ZoomTarget.Entity:GetFacing()
	-- r(3) = r(5) // registerVal5
	-- r(5) = r(3):c[9] // registerVal5:GetCross
	-- r(7) = g[10] // CVector3
	-- r(8) = c[4] // 0.000000
	-- r(9) = c[4] // 0.000000
	-- r(10) = c[11] // 1.000000
	registerVal5 = registerVal5:GetCross(CVector3(0.000000, 0.000000, 1.000000))
	-- r(4) = r(5) // registerVal5
	-- r(5) = g[12] // ipairs
	-- r(6) = r(0).field(13) // arg0.RegionBuildings
	registerVal5, registerVal6, registerVal7 = ipairs(arg0.RegionBuildings)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		-- skip the next [40] opcodes // advance 40 lines
		-- r(10) = r(0).field(5) // arg0.ZoomTarget
		if value9 ~= arg0.ZoomTarget then
			-- skip the next [23] opcodes // advance 23 lines
			-- r(10) = r(9).field(6) // value9.Entity
			-- r(10) = r(10):c[8] // value9.Entity:GetPos
			local registerVal10 = value9.Entity:GetPos()
			-- r(11) = r(10):c[14] // (registerVal10 - registerVal5):NormaliseXY
			local registerVal11 = (registerVal10 - registerVal5):NormaliseXY()
			-- skip the next [15] opcodes // advance 15 lines
			-- r(11) = g[15] // math
			-- r(11) = r(11).field(16) // math.abs
			-- r(12) = g[15] // math
			-- r(12) = r(12).field(17) // math.deg
			-- r(13) = r(10):c[18] // (registerVal10 - registerVal5):GetAngleTo
			-- r(15) = r(3) // registerVal5
			registerVal11 = math.abs(math.deg((registerVal10 - registerVal5):GetAngleTo(registerVal5)))
			if registerVal5 and 0.000000 < registerVal11 and registerVal11 < 30.000000 then
				-- r(11) = r(0).field(20) // arg0.Animate
				-- r(12) = r(9) // value9
				-- r(13) = r(1) // registerVal1
				arg0.Animate(value9, registerVal1)
			end
			-- r(10) = r(9).field(6) // value9.Entity
			-- r(10) = r(10):c[21] // value9.Entity:SetSaturationMasked
			-- r(12) = false
			value9.Entity:SetSaturationMasked(false)
			-- r(10) = r(9).field(22) // value9.Flag
			if value9.Flag then
				-- r(10) = r(9).field(22) // value9.Flag
				-- r(10) = r(10).field(6) // value9.Flag.Entity
				-- r(10) = r(10):c[21] // value9.Flag.Entity:SetSaturationMasked
				-- r(12) = false
				value9.Flag.Entity:SetSaturationMasked(false)
			end
		end
		-- skip the next [-42] opcodes // advance -42 lines
	end
	-- r(5) = r(0):c[23] // arg0:HideCharacters
	arg0:HideCharacters()
	arg0.MenuOpen = true
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0x2D
	-- Constant Count: 0x10
	-- Registers Count: 0xA
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.UnpauseWorld(arg0)
	local registerVal1 = {}
	local registerVal2 = {}
	local registerVal3 = {}
	local registerVal4 = {}
	registerVal4.A = 1.000000
	registerVal3.Colour = registerVal4
	registerVal2[0.500000] = registerVal3
	registerVal1.Keyframes = registerVal2
	-- r(2) = r(0).field(5) // arg0.RegionBuildings
	-- skip the next [29] opcodes // advance 29 lines
	-- r(2) = g[6] // ipairs
	-- r(3) = r(0).field(5) // arg0.RegionBuildings
	registerVal2, registerVal3, registerVal4 = ipairs(arg0.RegionBuildings)
	for index5,value6 in registerVal2, registerVal3, registerVal4 do
		-- skip the next [23] opcodes // advance 23 lines
		-- r(7) = r(6).field(7) // value6.Entity
		-- r(7) = r(7):c[8] // value6.Entity:SetSaturationMasked
		-- r(9) = true
		value6.Entity:SetSaturationMasked(true)
		-- r(7) = r(0).field(9) // arg0.Animate
		-- r(8) = r(6) // value6
		-- r(9) = r(1) // registerVal1
		arg0.Animate(value6, registerVal1)
		-- r(7) = r(6).field(10) // value6.LoopAnim
		if value6.LoopAnim then
			-- r(7) = r(0).field(11) // arg0.QueueAnim
			-- r(8) = r(6) // value6
			-- r(9) = r(6).field(10) // value6.LoopAnim
			arg0.QueueAnim(value6, value6.LoopAnim)
		end
		-- r(7) = r(6).field(12) // value6.Flag
		if value6.Flag then
			-- r(7) = r(6).field(12) // value6.Flag
			-- r(7) = r(7).field(7) // value6.Flag.Entity
			-- r(7) = r(7):c[8] // value6.Flag.Entity:SetSaturationMasked
			-- r(9) = true
			value6.Flag.Entity:SetSaturationMasked(true)
		end
		-- skip the next [-25] opcodes // advance -25 lines
	end
	-- r(2) = r(0):c[13] // arg0:ShowCharacters
	-- r(4) = r(1) // registerVal1
	arg0:ShowCharacters(registerVal1)
	arg0.MenuOpen = nil
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0x1B
	-- Constant Count: 0x7
	-- Registers Count: 0xB
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.SaturateBuildings(arg0, arg1, arg2)
	-- r(3) = g[0] // ipairs
	-- r(4) = r(0).field(1) // arg0.RegionBuildings
	local registerVal3, registerVal4, registerVal5 = ipairs(arg0.RegionBuildings)
	-- skip the next [20] opcodes // advance 20 lines
	-- skip the next [6] opcodes // advance 6 lines
	-- r(8) = r(2) // arg2
	-- r(9) = r(0).field(3) // arg0.PlayerEntity
	-- r(10) = r(7) // 
	local registerVal8 = arg2(arg0.PlayerEntity, )
	if arg2 == nil or registerVal8 then
		-- r(8) = r(7).field(4) // .Entity
		-- r(8) = r(8):c[5] // .Entity:SetSaturationMasked
		-- r(10) = r(1) // arg1
		.Entity:SetSaturationMasked(arg1)
		-- r(8) = r(7).field(6) // .Flag
		if .Flag then
			-- r(8) = r(7).field(6) // .Flag
			-- r(8) = r(8).field(4) // .Flag.Entity
			-- r(8) = r(8):c[5] // .Flag.Entity:SetSaturationMasked
			-- r(10) = r(1) // arg1
			.Flag.Entity:SetSaturationMasked(arg1)
		end
	end
	-- skip the next [-22] opcodes // advance -22 lines
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0x5
	-- Constant Count: 0x1
	-- Registers Count: 0x6
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.DesaturateBuildings(arg0, arg1)
	-- r(2) = r(0):c[0] // arg0:SaturateBuildings
	-- r(4) = false
	-- r(5) = r(1) // arg1
	arg0:SaturateBuildings(false, arg1)
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0x5
	-- Constant Count: 0x1
	-- Registers Count: 0x6
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.ResaturateBuildings(arg0, arg1)
	-- r(2) = r(0):c[0] // arg0:SaturateBuildings
	-- r(4) = true
	-- r(5) = r(1) // arg1
	arg0:SaturateBuildings(true, arg1)
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0x5
	-- Constant Count: 0x1
	-- Registers Count: 0x4
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x1
function WorldMap.DesaturateBuildingsExceptPotentialHomes(arg0)
	-- r(1) = r(0):c[0] // arg0:DesaturateBuildings
		-- OP Count: 0x8
		-- Constant Count: 0x1
		-- Registers Count: 0x5
		-- UpValue Count: 0x1
		-- SubFuncs Count: 0x0
	local function __FUNC_61FD_(arg0, arg1)
		-- r(2) = r(2).field(0) // .IsPotentialHome
		-- r(3) = r(0) // arg0
		-- r(4) = r(1) // arg1
		local registerVal2 = .IsPotentialHome(arg0, arg1)
		return (not registerVal2)
		-- return
	end

	-- r(0) = r(0) // arg0
	arg0:DesaturateBuildings(__FUNC_61FD_)
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0x36
	-- Constant Count: 0xD
	-- Registers Count: 0xE
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.DesaturateBuildingsCantMoveFamilyTo(arg0, arg1, arg2)
	-- r(3) = g[0] // ipairs
	-- r(4) = r(0).field(1) // arg0.RegionBuildings
	local registerVal3, registerVal4, registerVal5 = ipairs(arg0.RegionBuildings)
	for index6,value7 in registerVal3, registerVal4, registerVal5 do
		-- skip the next [47] opcodes // advance 47 lines
		-- r(8) = false
		-- r(9) = r(7).field(2) // value7.EntityID
		if value7.EntityID ~= nil then
			-- r(10) = g[4] // PlayerProperties
			-- r(10) = r(10).field(5) // PlayerProperties.IsCoOwned
			-- r(11) = g[6] // GetGameOwningHeroFromGameWorld
			local registerVal11 = GetGameOwningHeroFromGameWorld()
			-- r(12) = r(9) // value7.EntityID
			local registerVal10 = PlayerProperties.IsCoOwned(registerVal11, value7.EntityID)
			if registerVal10 == true then
				if arg1 ~= nil then
					-- r(10) = g[4] // PlayerProperties
					-- r(10) = r(10).field(8) // PlayerProperties.IsCoOwnedBySamePlayer
					-- r(11) = g[6] // GetGameOwningHeroFromGameWorld
					registerVal11 = GetGameOwningHeroFromGameWorld()
					-- r(12) = r(9) // value7.EntityID
					-- r(13) = r(1) // arg1
					registerVal10 = PlayerProperties.IsCoOwnedBySamePlayer(registerVal11, value7.EntityID, arg1)
					-- skip the next [2] opcodes // advance 2 lines
				else
					-- r(8) = false // skip next opcode
				end
				-- r(8) = true
			end
		end
		-- skip the next [8] opcodes // advance 8 lines
		-- r(10) = r(2) // arg2
		-- r(11) = r(0).field(9) // arg0.PlayerEntity
		-- r(12) = r(7) // value7
		registerVal10 = arg2(arg0.PlayerEntity, value7)
		-- skip the next [2] opcodes // advance 2 lines
		if arg2 ~= nil and not arg1 or true then
			-- r(10) = r(7).field(10) // value7.Entity
			-- r(10) = r(10):c[11] // value7.Entity:SetSaturationMasked
			-- r(12) = false
			value7.Entity:SetSaturationMasked(false)
			-- r(10) = r(7).field(12) // value7.Flag
			if value7.Flag then
				-- r(10) = r(7).field(12) // value7.Flag
				-- r(10) = r(10).field(10) // value7.Flag.Entity
				-- r(10) = r(10):c[11] // value7.Flag.Entity:SetSaturationMasked
				-- r(12) = false
				value7.Flag.Entity:SetSaturationMasked(false)
			end
		end
		-- skip the next [-49] opcodes // advance -49 lines
	end
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0x39
	-- Constant Count: 0xA
	-- Registers Count: 0x7
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.IsPotentialHome(arg0, arg1, arg2)
	-- r(3) = r(1).field(0) // arg1.EntityID
	if arg1.EntityID == nil then
		-- r(3) = false
		return false
	end
	if arg2 ~= nil then
		-- r(3) = g[2] // PlayerProperties
		-- r(3) = r(3).field(3) // PlayerProperties.IsCoOwned
		-- r(4) = g[4] // GetGameOwningHeroFromGameWorld
		local registerVal4 = GetGameOwningHeroFromGameWorld()
		-- r(5) = r(1).field(0) // arg1.EntityID
		local registerVal3 = PlayerProperties.IsCoOwned(registerVal4, arg1.EntityID)
		if registerVal3 == true then
			if arg2 ~= nil then
				-- r(3) = g[2] // PlayerProperties
				-- r(3) = r(3).field(6) // PlayerProperties.IsCoOwnedBySamePlayer
				-- r(4) = g[4] // GetGameOwningHeroFromGameWorld
				registerVal4 = GetGameOwningHeroFromGameWorld()
				-- r(5) = r(1).field(0) // arg1.EntityID
				-- r(6) = r(2) // arg2
				registerVal3 = PlayerProperties.IsCoOwnedBySamePlayer(registerVal4, arg1.EntityID, arg2)
				-- skip the next [2] opcodes // advance 2 lines
			else
				-- r(3) = false // skip next opcode
			end
			-- r(3) = true
		end
		if true then
			-- r(4) = false
			return false
		end
	end
	-- r(3) = g[2] // PlayerProperties
	-- r(3) = r(3).field(7) // PlayerProperties.GetIsHome
	-- r(4) = g[4] // GetGameOwningHeroFromGameWorld
	registerVal4 = GetGameOwningHeroFromGameWorld()
	-- r(5) = r(1).field(0) // arg1.EntityID
	registerVal3 = PlayerProperties.GetIsHome(registerVal4, arg1.EntityID)
	-- skip the next [15] opcodes // advance 15 lines
	-- r(3) = g[2] // PlayerProperties
	-- r(3) = r(3).field(8) // PlayerProperties.IsOwnedByPlayerFromString
	-- r(4) = g[4] // GetGameOwningHeroFromGameWorld
	registerVal4 = GetGameOwningHeroFromGameWorld()
	-- r(5) = r(1).field(0) // arg1.EntityID
	registerVal3 = PlayerProperties.IsOwnedByPlayerFromString(registerVal4, arg1.EntityID)
	if registerVal3 and registerVal3 then
		-- r(3) = g[2] // PlayerProperties
		-- r(3) = r(3).field(9) // PlayerProperties.IsMaritalHomeFromString
		-- r(4) = g[4] // GetGameOwningHeroFromGameWorld
		registerVal4 = GetGameOwningHeroFromGameWorld()
		-- r(5) = r(1).field(0) // arg1.EntityID
		registerVal3 = PlayerProperties.IsMaritalHomeFromString(registerVal4, arg1.EntityID)
	end
	return (not registerVal3)
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0x78
	-- Constant Count: 0x1B
	-- Registers Count: 0x13
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.UpdateBuildingVisibilities(arg0)
	local registerVal1 = {}
	local registerVal2 = {}
	local registerVal3 = {}
	local registerVal4 = {}
	registerVal4.A = 0.300000
	registerVal3.Colour = registerVal4
	registerVal2[0.500000] = registerVal3
	registerVal1.Keyframes = registerVal2
	registerVal2 = {}
	registerVal3 = {}
	registerVal4 = {}
	local registerVal5 = {}
	registerVal5.A = 1.000000
	registerVal4.Colour = registerVal5
	registerVal3[0.500000] = registerVal4
	registerVal2.Keyframes = registerVal3
	-- r(3) = r(0).field(6) // arg0.Target
	if not arg0.Target then
		-- r(3) = r(0).field(7) // arg0.ClosestObject
	end
	-- r(4 to 6) inclusive = nil
	-- skip the next [9] opcodes // advance 9 lines
	-- r(7) = r(3).field(8) // arg0.ClosestObject.Entity
	-- r(7) = r(7).field(9) // arg0.ClosestObject.Entity.GetFacing
	if arg0.ClosestObject and arg0.ClosestObject.Entity.GetFacing then
		-- r(7) = r(3).field(8) // arg0.ClosestObject.Entity
		-- r(7) = r(7):c[10] // arg0.ClosestObject.Entity:GetPos
		local registerVal7 = arg0.ClosestObject.Entity:GetPos()
		-- r(4) = r(7) // registerVal7
		-- skip the next [10] opcodes // advance 10 lines
	else
		-- r(7) = r(0).field(11) // arg0.Camera
		if arg0.Camera then
			-- r(7) = r(0).field(12) // arg0.Cursor
			-- r(7) = r(7).field(8) // arg0.Cursor.Entity
			-- r(7) = r(7):c[10] // arg0.Cursor.Entity:GetPos
			registerVal7 = arg0.Cursor.Entity:GetPos()
			-- r(4) = r(7) // registerVal7
			-- skip the next [1] opcodes // advance 1 lines
		else
			return 
		end
	end
	-- r(7) = g[13] // CVector3
	-- r(8) = r(0).field(11) // arg0.Camera
	-- r(8) = r(8).field(9) // arg0.Camera.GetFacing
	local registerVal8 = arg0.Camera.GetFacing()
	-- r(8) = r(8):c[14] // registerVal8:GetX
	registerVal8 = registerVal8:GetX()
	-- r(9) = r(0).field(11) // arg0.Camera
	-- r(9) = r(9).field(9) // arg0.Camera.GetFacing
	local registerVal9 = arg0.Camera.GetFacing()
	-- r(9) = r(9):c[15] // registerVal9:GetY
	registerVal9 = registerVal9:GetY()
	-- r(10) = c[16] // 0.000000
	registerVal7 = CVector3(-registerVal8, -registerVal9, 0.000000)
	-- r(5) = r(7) // registerVal7
	-- r(7) = r(5):c[17] // registerVal7:GetCross
	-- r(9) = g[13] // CVector3
	-- r(10) = c[16] // 0.000000
	-- r(11) = c[16] // 0.000000
	-- r(12) = c[5] // 1.000000
	registerVal7 = registerVal7:GetCross(CVector3(0.000000, 0.000000, 1.000000))
	-- r(6) = r(7) // registerVal7
	-- r(7) = r(5):c[18] // registerVal7:NormaliseXY
	registerVal7:NormaliseXY()
	-- r(7) = g[19] // ipairs
	-- r(8) = r(0).field(20) // arg0.RegionBuildings
	registerVal7, registerVal8, registerVal9 = ipairs(arg0.RegionBuildings)
	for index10,value11 in registerVal7, registerVal8, registerVal9 do
		-- skip the next [45] opcodes // advance 45 lines
		-- r(12) = r(11).field(8) // value11.Entity
		-- r(12) = r(12):c[21] // value11.Entity:IsAnimating
		local registerVal12 = value11.Entity:IsAnimating()
		if not registerVal12 then
			-- r(12) = r(2) // registerVal2
			-- skip the next [33] opcodes // advance 33 lines
			-- skip the next [31] opcodes // advance 31 lines
			-- r(13) = r(0):c[22] // arg0:IsPointOffTheEndOfCameraLine
			-- r(15) = r(11).field(8) // value11.Entity
			-- r(15) = r(15):c[10] // value11.Entity:GetPos
			local registerVal13 = arg0:IsPointOffTheEndOfCameraLine(value11.Entity:GetPos())
			-- skip the next [24] opcodes // advance 24 lines
			-- r(13) = r(11).field(8) // value11.Entity
			-- r(13) = r(13):c[10] // value11.Entity:GetPos
			registerVal13 = value11.Entity:GetPos()
			-- r(14) = r(0):c[23] // arg0:GetDistFromCameraLine
			-- r(16) = r(11).field(8) // value11.Entity
			local registerVal14 = arg0:GetDistFromCameraLine(value11.Entity)
			-- r(15) = c[1] // 0.500000
			-- r(16) = r(13):c[18] // (registerVal13 - registerVal7):NormaliseXY
			local registerVal16 = (registerVal13 - registerVal7):NormaliseXY()
			if value11 ~= arg0.ClosestObject and registerVal7 and not registerVal13 and 0.000000 < registerVal16 then
				-- r(16) = r(11).field(24) // value11.SelectionRadius
				-- skip the next [3] opcodes // advance 3 lines
				-- r(16) = r(11).field(24) // value11.SelectionRadius
				if registerVal1 or registerVal14 < value11.SelectionRadius then
					-- r(16) = r(5):c[25] // registerVal7:GetDot
					-- r(18) = r(13) // (registerVal13 - registerVal7)
					registerVal16 = registerVal7:GetDot((registerVal13 - registerVal7))
					if 0.500000 < registerVal16 then
						-- r(12) = r(1) // registerVal1
					end
				end
			end
			-- r(13) = r(0).field(26) // arg0.Animate
			-- r(14) = r(11) // value11
			-- r(15) = r(12) // registerVal1
			arg0.Animate(value11, registerVal1)
		end
		-- skip the next [-47] opcodes // advance -47 lines
	end
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0x10
	-- Constant Count: 0x3
	-- Registers Count: 0x6
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.SetThemeFromRegion(arg0, arg1)
	if not arg1 then
		return 
	end
	-- r(2) = r(1).field(0) // arg1.Theme
	if arg1.Theme then
		-- r(2) = r(0):c[1] // arg0:SetEnvironmentTheme
		-- r(4) = r(1).field(0) // arg1.Theme
		-- r(5) = true
		arg0:SetEnvironmentTheme(arg1.Theme, true)
		-- skip the next [4] opcodes // advance 4 lines
	else
		-- r(2) = r(0):c[1] // arg0:SetEnvironmentTheme
		-- r(4) = c[2] // "EnvThemeWorldMap"
		-- r(5) = true
		arg0:SetEnvironmentTheme("EnvThemeWorldMap", true)
	end
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0xC
	-- Constant Count: 0x5
	-- Registers Count: 0x7
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.SetEnvironmentTheme(arg0, arg1, arg2)
	if arg1 then
		if arg2 == true then
			-- r(3) = r(0).field(1) // arg0.RemoveThemes
			arg0.RemoveThemes()
		end
		-- r(3) = r(0).field(2) // arg0.SetTheme
		-- r(4) = r(1) // arg1
		-- r(5) = c[3] // 0.000000
		-- r(6) = c[4] // 1.000000
		arg0.SetTheme(arg1, 0.000000, 1.000000)
	end
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0x1E
	-- Constant Count: 0xD
	-- Registers Count: 0xA
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.HideCharacters(arg0)
	local registerVal1 = {}
	local registerVal2 = {}
	local registerVal3 = {}
	local registerVal4 = {}
	registerVal4.A = 0.000000
	registerVal3.Colour = registerVal4
	registerVal2[0.500000] = registerVal3
	registerVal1.Keyframes = registerVal2
	-- r(2) = g[5] // pairs
	-- r(3) = r(0).field(6) // arg0.Characters
	registerVal2, registerVal3, registerVal4 = pairs(arg0.Characters)
	for index5,value6 in registerVal2, registerVal3, registerVal4 do
		-- skip the next [15] opcodes // advance 15 lines
		-- r(7) = r(0).field(7) // arg0.ZoomTarget
		if value6 ~= arg0.ZoomTarget then
			-- r(7) = r(6).field(8) // value6.Entity
			-- r(7) = r(7).field(9) // value6.Entity.StopAnim
			if value6.Entity.StopAnim then
				-- r(7) = r(6).field(8) // value6.Entity
				-- r(7) = r(7):c[9] // value6.Entity:StopAnim
				value6.Entity:StopAnim()
			end
			-- r(7) = r(0).field(10) // arg0.Animate
			-- r(8) = r(6) // value6
			-- r(9) = r(1) // registerVal1
			arg0.Animate(value6, registerVal1)
			value6.Paused = true
		end
		-- skip the next [-17] opcodes // advance -17 lines
	end
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0x17
	-- Constant Count: 0xA
	-- Registers Count: 0xA
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.ShowCharacters(arg0)
	local registerVal1 = {}
	local registerVal2 = {}
	local registerVal3 = {}
	local registerVal4 = {}
	registerVal4.A = 1.000000
	registerVal3.Colour = registerVal4
	registerVal2[0.500000] = registerVal3
	registerVal1.Keyframes = registerVal2
	-- r(2) = r(0).field(5) // arg0.Characters
	-- skip the next [11] opcodes // advance 11 lines
	-- r(2) = g[6] // pairs
	-- r(3) = r(0).field(5) // arg0.Characters
	registerVal2, registerVal3, registerVal4 = pairs(arg0.Characters)
	for index5,value6 in registerVal2, registerVal3, registerVal4 do
		-- skip the next [5] opcodes // advance 5 lines
		-- r(7) = r(0).field(7) // arg0.Animate
		-- r(8) = r(6) // value6
		-- r(9) = r(1) // registerVal1
		arg0.Animate(value6, registerVal1)
		value6.Paused = false
		-- skip the next [-7] opcodes // advance -7 lines
	end
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0x1A
	-- Constant Count: 0x9
	-- Registers Count: 0x6
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.AutogenerateFamilyInBuilding(arg0, arg1)
	-- r(2) = r(0):c[0] // arg0:GetBuildingWithName
	-- r(4) = r(1) // arg1
	local registerVal2 = arg0:GetBuildingWithName(arg1)
	-- skip the next [20] opcodes // advance 20 lines
	-- r(3) = g[1] // PlayerProperties
	-- r(3) = r(3).field(2) // PlayerProperties.IsOwnedByPlayerFromString
	-- r(4) = g[3] // GetGameOwningHeroFromGameWorld
	local registerVal4 = GetGameOwningHeroFromGameWorld()
	-- r(5) = r(2).field(4) // registerVal2.EntityID
	local registerVal3 = PlayerProperties.IsOwnedByPlayerFromString(registerVal4, registerVal2.EntityID)
	if registerVal2 and not registerVal3 then
		-- r(3) = g[1] // PlayerProperties
		-- r(3) = r(3).field(5) // PlayerProperties.PurchasePropertyFromString
		-- r(4) = g[3] // GetGameOwningHeroFromGameWorld
		registerVal4 = GetGameOwningHeroFromGameWorld()
		-- r(5) = r(2).field(4) // registerVal2.EntityID
		PlayerProperties.PurchasePropertyFromString(registerVal4, registerVal2.EntityID)
		-- r(3) = r(0):c[6] // arg0:CreateFamily
		arg0:CreateFamily()
		-- r(3) = g[7] // WorldMap
		-- r(3) = r(3).field(8) // WorldMap.UpdateFlag
		-- r(4) = r(2) // registerVal2
		WorldMap.UpdateFlag(registerVal2)
	end
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0x10
	-- Constant Count: 0x4
	-- Registers Count: 0x3
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.IsQuestGiver(arg0)
	-- r(1) = r(0).field(0) // arg0.Type
	-- r(2) = g[1] // EWorldMapEntityType
	-- r(2) = r(2).field(2) // EWorldMapEntityType.MAP_ENTITY_QUEST_GIVER_CHARACTER
	-- skip the next [5] opcodes // advance 5 lines
	-- r(1) = r(0).field(0) // arg0.Type
	-- r(2) = g[1] // EWorldMapEntityType
	-- r(2) = r(2).field(3) // EWorldMapEntityType.MAP_ENTITY_QUEST_GIVER_OBJECT
	if arg0.Type == EWorldMapEntityType.MAP_ENTITY_QUEST_GIVER_CHARACTER or arg0.Type == EWorldMapEntityType.MAP_ENTITY_QUEST_GIVER_OBJECT then
		-- r(1) = true
		return true
		-- skip the next [2] opcodes // advance 2 lines
	else
		-- r(1) = false
		return false
	end
	-- return
end

-- r(0) = g[0] // WorldMap
	-- OP Count: 0x9
	-- Constant Count: 0x5
	-- Registers Count: 0x7
	-- UpValue Count: 0x0
	-- SubFuncs Count: 0x0
function WorldMap.ResetModeCursorPositions(arg0)
	-- r(1) = g[0] // pairs
	-- r(2) = g[1] // WorldMap
	-- r(2) = r(2).field(2) // WorldMap.Modes
	local registerVal1, registerVal2, registerVal3 = pairs(WorldMap.Modes)
	for index4,value5 in registerVal1, registerVal2, registerVal3 do
		-- skip the next [1] opcodes // advance 1 lines
		value5.CursorPosition = nil
		-- skip the next [-3] opcodes // advance -3 lines
	end
	-- return
end

-- return
